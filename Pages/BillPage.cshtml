@page
@model damiWeb.Pages.BillPageModel
<link rel="stylesheet" href="~/css/BillPage.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="bill-container">
    <div class="bill-title">HÓA ĐƠN BÁN HÀNG</div>

    <form method="post" asp-page-handler="Save">
        <div class="bill-info" style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <div style="margin: 10px 0;">
                    <label>Số hóa đơn:</label>
                    <select id="orderSelect" onchange="loadOrder(this.value)">
                        <option value="">-- Chọn số hóa đơn --</option>
                        @foreach (var orderNo in Model.ExistingOrderNos)
                        {
                            <option value="@orderNo">@orderNo</option>
                        }
                    </select>

                    <input type="hidden" name="OrderNo" value="@Model.OrderNo" />
                </div>
            </div>
            <div>
                <label>Ngày:</label>
                <input asp-for="OrderDate" type="date" />
            </div>
        </div>

        <div class="customer-info" style="display: flex; align-items: center; margin-top: 10px;">
            <label style="margin-right: 8px;">Khách hàng:</label>
            <select asp-for="CustomerID" id="txtMaKH" style="width: 100px; margin-right: 10px;" onchange="onCustomerChange()">
                <option value="">-- Chọn mã KH --</option>
                @foreach (var c in Model.AllCustomers)
                {
                    <option value="@c.CustomerID">@c.CustomerID - @c.CustomerName</option>
                }
            </select>

            <input asp-for="CustomerName" readonly style="flex-grow: 1;" />
        </div>

        <div class="customer-info" style="margin-top: 10px;">
            <label>Địa chỉ:</label>
            <input asp-for="Address" readonly style="width: 70%;" />
        </div>

        <div class="table-wrapper">
            <table class="items-table">
                <thead>
                    <tr>
                        <th>Mã hàng</th>
                        <th>Tên hàng</th>
                        <th>ĐVT</th>
                        <th>Số lượng</th>
                        <th>Đơn giá</th>
                        <th>Thành tiền</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="goods-body">
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        <tr>
                            <td>
                                <select name="Items[@i].ItemID" class="item-id" onchange="onItemChange(this)">
                                    <option value="">-- Mã hàng --</option>
                                    @foreach (var item in Model.AllItems)
                                    {
                                        var selected = Model.Items[i].ItemID == item.ItemID ? "selected" : "";
                                        <option value="@item.ItemID" selected="@(Model.Items[i].ItemID == item.ItemID ? "selected" : null)">
                                            @($"{item.ItemID}")
                                        </option>
                                    }
                                </select>
                            </td>
                            <td>
                                <input name="Items[@i].ItemName" class="item-name" value="@Model.Items[i].ItemName"
                                       onchange="onItemChange(this)" />
                            </td>
                            <td><input name="Items[@i].Unit" class="item-unit" value="@Model.Items[i].Unit" readonly /></td>
                            <td><input name="Items[@i].Quantity" type="number" class="item-qty text-right" value="@Model.Items[i].Quantity" /></td>
                            <td><input name="Items[@i].Price" type="text" class="item-price text-right" value="@Model.Items[i].Price" /></td>
                            <td><input name="Items[@i].Amount" class="item-amount text-right" type="text" value="@Model.Items[i].Amount.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))" /></td>
                            <td><button type="button" onclick="removeRow(this)">X</button></td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="total-row">
                        <td colspan="3" class="text-right">Tổng cộng</td>
                        <td id="totalQty" class="text-right">0</td>
                        <td></td>
                        <td id="totalAmount" class="text-right">0</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div style="margin-top: 10px; text-align: left;">
            <button type="button" onclick="addRow()">+ Thêm dòng</button>
        </div>

        <div class="btn-group">
            <button type="submit">Ghi</button>
            <button type="reset">Bỏ qua</button>
            <button type="button" onclick="location.href='/'">Trở về</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        const txtMaKH = document.getElementById("txtMaKH");

        txtMaKH.addEventListener("change", () => {
            const id = txtMaKH.value.trim();

            if (!id) {
                document.querySelector('[name="CustomerName"]').value = '';
                document.querySelector('[name="Address"]').value = '';
                return;
            }

            fetch(`/BillPage?handler=Customer&id=${encodeURIComponent(id)}`)
                .then(r => r.json())
                .then(d => {
                    if (d) {
                        document.querySelector('[name="CustomerName"]').value = d.customerName;
                        document.querySelector('[name="Address"]').value = d.address;
                    } else {
                        alert("Không tìm thấy khách hàng!");
                        document.querySelector('[name="CustomerName"]').value = '';
                        document.querySelector('[name="Address"]').value = '';
                    }
                });
        });

        function updateTotals() {
            let totalQty = 0, totalAmount = 0;

            const formatter = new Intl.NumberFormat('vi-VN', {
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });

            document.querySelectorAll('#goods-body tr').forEach(row => {
                const qty = parseFloat(row.querySelector('.item-qty').value) || 0;

                const rawPrice = row.querySelector('.item-price').value.replace(/\./g, '');
                const price = parseFloat(rawPrice) || 0;

                const amount = qty * price;

                row.querySelector('.item-amount').value = formatter.format(amount);
                totalQty += qty;
                totalAmount += amount;
            });

            document.getElementById('totalQty').textContent = totalQty;
            document.getElementById('totalAmount').textContent = formatter.format(totalAmount);
        }

        document.addEventListener('input', function (e) {
            if (e.target.classList.contains('item-qty') || e.target.classList.contains('item-price')) {
                updateTotals();
            }
        });

        function addRow() {
            const table = document.getElementById("goods-body");
            const index = table.rows.length;
            const row = table.insertRow();

            let itemOptions = '<option value="">-- Mã hàng --</option>';
            itemList.forEach(item => {
                itemOptions += `<option value="${item.itemID}">${item.itemID} </option>`;
            });

            row.innerHTML = `
                <td>
                    <select name="Items[${index}].ItemID" class="item-id" onchange="onItemChange(this)">
                        ${itemOptions}
                    </select>
                </td>
                <td><input name="Items[${index}].ItemName" class="item-name" onchange="onItemChange(this)" readonly /></td>
                <td><input name="Items[${index}].Unit" class="item-unit" readonly /></td>
                <td><input name="Items[${index}].Quantity" type="number" class="item-qty text-right" value="0" /></td>
                <td><input name="Items[${index}].Price" type="number" class="item-price text-right" value="0" /></td>
                <td><input name="Items[${index}].Amount" class="item-amount text-right" type="text" /></td>
                <td><button type="button" onclick="removeRow(this)">X</button></td>
            `;
        }

        function removeRow(btn) {
            btn.closest('tr').remove();
            updateTotals();
        }

        document.addEventListener('DOMContentLoaded', updateTotals);

                    let itemList = [];

               document.addEventListener("DOMContentLoaded", function () {
            fetch("/BillPage?handler=AllItems", {
                headers: {
                    "Cache-Control": "no-cache"
                }
            })
                .then(res => {
                    if (!res.ok) throw new Error("Fetch thất bại");
                    return res.json();
                })
                .then(data => {
                    if (!data || !Array.isArray(data)) throw new Error("Không phải mảng JSON");
                    itemList = data;
                    console.log("Danh sách hàng:", itemList); 
                })
                .catch(err => console.error("Lỗi fetch AllItems:", err));
        });

        function onItemChange(input) {
            const row = input.closest('tr');
            const val = input.value.trim();
            console.log("Người dùng nhập:", val);

            const item = itemList.find(i => i.itemID === val || i.itemName === val);

            if (item) {
                console.log("Tìm thấy:", item);
                row.querySelector('.item-id').value = item.itemID;
                row.querySelector('.item-name').value = item.itemName;
                row.querySelector('.item-unit').value = item.unit;
                updateTotals();
            } else {
                console.warn("Không tìm thấy mặt hàng với:", val);
            }
        }

         document.addEventListener('blur', function (e) {
            if (e.target.classList.contains('item-price')) {
                const raw = e.target.value.replace(/\D/g, '');
                let number = parseFloat(raw) || 0;

                if (number > 0 && number < 1000) {
                    number *= 1000;
                }

                const formatted = new Intl.NumberFormat('vi-VN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(number);

                e.target.value = formatted;

                updateTotals();
            }
        }, true);

        document.addEventListener('blur', function (e) {
            if (e.target.classList.contains('item-amount')) {
                const row = e.target.closest('tr');

                const rawAmount = e.target.value.replace(/\D/g, '');
                const amount = parseFloat(rawAmount) || 0;

                const qty = parseFloat(row.querySelector('.item-qty').value) || 0;

                if (qty > 0) {
                    const price = amount / qty;

                    let adjustedPrice = price;
                    if (price < 1000) adjustedPrice *= 1000;

                    const formattedPrice = new Intl.NumberFormat('vi-VN', {
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }).format(Math.round(adjustedPrice));

                    row.querySelector('.item-price').value = formattedPrice;

                    updateTotals();
                }
            }
        }, true);

        function loadOrder(orderNo) {
            if (!orderNo) return;

            fetch(`/BillPage?handler=LoadOrder&orderNo=${encodeURIComponent(orderNo)}`, {
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Không thể fetch dữ liệu từ server');
                }
                return response.json();
            })
            .then(data => {
                if (!data || !data.items || !Array.isArray(data.items)) {
                    Swal.fire('Lỗi', 'Không tìm thấy hóa đơn hoặc dữ liệu không hợp lệ', 'error');
                    return;
                }

                // Gán thông tin chung
                document.querySelector('[name="OrderNo"]').value = data.orderNo ?? '';
                document.querySelector('[name="OrderDate"]').value = (data.orderDate ?? '').substring(0, 10);
                document.querySelector('[name="CustomerID"]').value = data.customerID ?? '';
                document.querySelector('[name="CustomerName"]').value = data.customerName ?? '';
                document.querySelector('[name="Address"]').value = data.address ?? '';

                // Xóa dòng cũ
                const tbody = document.getElementById('goods-body');
                tbody.innerHTML = '';

                // Thêm từng dòng hàng
                data.items.forEach((item, index) => {
                    let itemOptions = '<option value="">-- Mã hàng --</option>';
                    if (Array.isArray(itemList)) {
                        itemList.forEach(i => {
                            const selected = i.itemID === item.itemID ? 'selected' : '';
                            itemOptions += `<option value="${i.itemID}" ${selected}>${i.itemID} - ${i.itemName}</option>`;
                        });
                    }

                    const row = document.createElement('tr');
                    const amount = (item.quantity || 0) * (item.price || 0);

                    row.innerHTML = `
                        <td>
                            <select name="Items[${index}].ItemID" class="item-id" onchange="onItemChange(this)">
                                ${itemOptions}
                            </select>
                        </td>
                        <td><input name="Items[${index}].ItemName" class="item-name" value="${item.itemName ?? ''}" onchange="onItemChange(this)" /></td>
                        <td><input name="Items[${index}].Unit" class="item-unit" value="${item.unit ?? ''}" readonly /></td>
                        <td><input name="Items[${index}].Quantity" type="number" class="item-qty text-right" value="${item.quantity ?? 0}" /></td>
                        <td><input name="Items[${index}].Price" type="text" class="item-price text-right" value="${formatCurrency(item.price)}" /></td>
                        <td><input name="Items[${index}].Amount" class="item-amount text-right" type="text" value="${formatCurrency(amount)}" /></td>
                        <td><button type="button" onclick="removeRow(this)">X</button></td>
                    `;
                    tbody.appendChild(row);
                });

                updateTotals();
            })
            .catch(error => {
                console.error('Lỗi khi tải hóa đơn:', error);
                Swal.fire('Lỗi', 'Không thể tải hóa đơn', 'error');
            });
        }

        @if (TempData["msg"] != null)
        {
                <text>
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công',
                        text: '@TempData["msg"]'
                    });
                </text>
        }
    </script>
}
